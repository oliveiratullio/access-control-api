name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, master ]
  pull_request:
    branches: [ main, develop, master ]


jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: access_control_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.18.2
        run_install: false

    - name: Install dependencies
      run: pnpm import && pnpm install --frozen-lockfile

    - name: Wait for Postgres
      run: |
        for i in {1..30}; do
          (echo > /dev/tcp/127.0.0.1/5432) && exit 0 || sleep 2;
        done
        exit 1

    - name: Install PostgreSQL client
      run: echo "Skipping client install; extension handled by migration."

    - name: Create uuid-ossp extension
      run: echo "Extension will be created by migration."

    - name: Run migrations
      run: pnpm exec ts-node -e "require('./src/config/typeorm.config').AppDataSource.initialize().then(async (ds) => { await ds.runMigrations(); await ds.destroy(); })"
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASS: postgres
        DB_NAME: access_control_test
        JWT_SECRET: test-secret-key-for-ci
        JWT_EXPIRES_IN: 1h

    - name: Run linting
      run: pnpm run lint

    - name: Run tests
      run: pnpm run test
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASS: postgres
        DB_NAME: access_control_test
        JWT_SECRET: test-secret-key-for-ci
        JWT_EXPIRES_IN: 1h

    - name: Run e2e tests
      run: pnpm run test:e2e
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASS: postgres
        DB_NAME: access_control_test
        JWT_SECRET: test-secret-key-for-ci
        JWT_EXPIRES_IN: 1h

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.18.2
        run_install: false

    - name: Install dependencies
      run: pnpm import && pnpm install --frozen-lockfile

    - name: Build application
      run: pnpm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'pnpm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.18.2
        run_install: false

    - name: Install dependencies
      run: pnpm import && pnpm install --frozen-lockfile

    - name: Run security audit
      run: pnpm audit --audit-level=moderate

    - name: Run dependency check
      run: pnpm dlx audit-ci --config audit-ci.json
      continue-on-error: true

  docker:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/access-control-api:latest
          ${{ secrets.DOCKER_USERNAME }}/access-control-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
